import sys
import time
from naoqi import ALProxy


def main(robotIP, port):
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.161887, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.386526, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.386526, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.161887, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.161887, [3, -0.08, 0], [3, 0.0666667, 0]], [0.437512, [3, -0.0666667, 0], [3, 0.2, 0]], [0.437512, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.161887, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.00400173, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.00729047, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.500126, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.500126, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.00729047, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.00729047, [3, -0.08, 0], [3, 0.0666667, 0]], [0.406468, [3, -0.0666667, 0], [3, 0.2, 0]], [0.406468, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.00729047, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.000929716, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LAnklePitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.09, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.127364, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.127364, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.09, [3, -0.0666667, 0], [3, 0.08, 0]], [0.09, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.12583, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.12583, [3, -0.2, 0], [3, 0.0666667, 0]], [0.09, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.35, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LAnkleRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.136743, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.187106, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.187106, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.136743, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.136743, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.187106, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.187106, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.136743, [3, -0.0666667, -0.0207896], [3, 0.133333, 0.0415792]], [0, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.408548, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.481634, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.481634, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.408548, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.408548, [3, -0.08, 0], [3, 0.0666667, 0]], [-1.15813, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.15813, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.408548, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.00907, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-1.19556, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.92368, [3, -0.0666667, 0], [3, 0.253333, 0]], [-1.92368, [3, -0.253333, 0], [3, 0.0666667, 0]], [-1.19556, [3, -0.0666667, 0], [3, 0.08, 0]], [-1.19556, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.139636, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.139636, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.19556, [3, -0.0666667, 0.0931456], [3, 0.133333, -0.186291]], [-1.38185, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.296851, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.292, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.292, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.296851, [3, -0.0666667, 0], [3, 0.08, 0]], [0.296851, [3, -0.08, 0], [3, 0.0666667, 0]], [0.292, [3, -0.0666667, 0], [3, 0.2, 0]], [0.292, [3, -0.2, 0], [3, 0.0666667, 0]], [0.296851, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.259033, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHipPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.1218, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.432547, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.432547, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.1218, [3, -0.0666667, 0], [3, 0.08, 0]], [0.1218, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.432547, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.432547, [3, -0.2, 0], [3, 0.0666667, 0]], [0.1218, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.45, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHipRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.106946, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.135034, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.135034, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.106946, [3, -0.0666667, 0], [3, 0.08, 0]], [0.106946, [3, -0.08, 0], [3, 0.0666667, 0]], [0.135034, [3, -0.0666667, 0], [3, 0.2, 0]], [0.135034, [3, -0.2, 0], [3, 0.0666667, 0]], [0.106946, [3, -0.0666667, 0.0139072], [3, 0.133333, -0.0278143]], [0.00986949, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHipYawPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.172173, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.31903, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.31903, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.172173, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.172173, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.31903, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.31903, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.172173, [3, -0.0666667, -0.0349749], [3, 0.133333, 0.0699499]], [-0.00425597, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LKneePitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.09, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.688724, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.688724, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.09, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.09, [3, -0.08, 0], [3, 0.0666667, 0]], [0.688724, [3, -0.0666667, 0], [3, 0.2, 0]], [0.688724, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.09, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.699999, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[1.47659, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.66435, [3, -0.0666667, 0], [3, 0.253333, 0]], [1.66435, [3, -0.253333, 0], [3, 0.0666667, 0]], [1.47659, [3, -0.0666667, 0], [3, 0.08, 0]], [1.47659, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.021518, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.021518, [3, -0.2, 0], [3, 0.0666667, 0]], [1.47659, [3, -0.0666667, 0], [3, 0.133333, 0]], [1.40226, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.186494, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.21949, [3, -0.0666667, 0], [3, 0.253333, 0]], [1.21949, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.186494, [3, -0.0666667, 0], [3, 0.08, 0]], [0.186494, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.268493, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.268493, [3, -0.2, 0], [3, 0.0666667, 0]], [0.186494, [3, -0.0666667, -0.0565461], [3, 0.133333, 0.113092]], [0.299586, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.0981755, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.067538, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.067538, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.0981755, [3, -0.0666667, 0], [3, 0.08, 0]], [0.0981755, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.693411, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.693411, [3, -0.2, 0], [3, 0.0666667, 0]], [0.0981755, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.00392109, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RAnklePitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.0826511, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.414139, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.414139, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.0826511, [3, -0.0666667, 0], [3, 0.08, 0]], [0.0826511, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.414139, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.414139, [3, -0.2, 0], [3, 0.0666667, 0]], [0.0826511, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.35, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RAnkleRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.12501, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.039926, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.039926, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.12501, [3, -0.0666667, 0], [3, 0.08, 0]], [0.12501, [3, -0.08, 0], [3, 0.0666667, 0]], [0.0291878, [3, -0.0666667, 0], [3, 0.2, 0]], [0.0291878, [3, -0.2, 0], [3, 0.0666667, 0]], [0.12501, [3, -0.0666667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.413516, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.45734, [3, -0.0666667, 0], [3, 0.253333, 0]], [1.45734, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.413516, [3, -0.0666667, 0], [3, 0.08, 0]], [0.413516, [3, -0.08, 0], [3, 0.0666667, 0]], [0.0890141, [3, -0.0666667, 0], [3, 0.2, 0]], [0.0890141, [3, -0.2, 0], [3, 0.0666667, 0]], [0.413516, [3, -0.0666667, -0.102287], [3, 0.133333, 0.204574]], [1.0096, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[1.18863, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.174835, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.174835, [3, -0.253333, 0], [3, 0.0666667, 0]], [1.18863, [3, -0.0666667, 0], [3, 0.08, 0]], [1.18863, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.83914, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.83914, [3, -0.2, 0], [3, 0.0666667, 0]], [1.18863, [3, -0.0666667, -0.0964582], [3, 0.133333, 0.192916]], [1.38155, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.3, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.3116, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.3116, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.3, [3, -0.0666667, 0], [3, 0.08, 0]], [0.3, [3, -0.08, 0], [3, 0.0666667, 0]], [0.3116, [3, -0.0666667, 0], [3, 0.2, 0]], [0.3116, [3, -0.2, 0], [3, 0.0666667, 0]], [0.3, [3, -0.0666667, 0.00577322], [3, 0.133333, -0.0115464]], [0.259641, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RHipPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.121843, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.429562, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.429562, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.121843, [3, -0.0666667, 0], [3, 0.08, 0]], [0.121843, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.429562, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.429562, [3, -0.2, 0], [3, 0.0666667, 0]], [0.121843, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.45, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RHipRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.0956137, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0628521, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.0628521, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.0956137, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.0956137, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.0628521, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0628521, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.0956137, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.00236349, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RHipYawPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.172173, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.31903, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.31903, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.172173, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.172173, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.31903, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.31903, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.172173, [3, -0.0666667, -0.0349749], [3, 0.133333, 0.0699499]], [-0.00425597, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RKneePitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.09, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.960325, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.960325, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.09, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.09, [3, -0.08, 0], [3, 0.0666667, 0]], [0.954189, [3, -0.0666667, 0], [3, 0.2, 0]], [0.954189, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.09, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.699999, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[1.46572, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.204064, [3, -0.0666667, 0], [3, 0.253333, 0]], [0.204064, [3, -0.253333, 0], [3, 0.0666667, 0]], [1.46572, [3, -0.0666667, 0], [3, 0.08, 0]], [1.46572, [3, -0.08, 0], [3, 0.0666667, 0]], [-0.0827939, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0827939, [3, -0.2, 0], [3, 0.0666667, 0]], [1.46572, [3, -0.0666667, 0], [3, 0.133333, 0]], [1.40207, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[-0.175449, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.00771189, [3, -0.0666667, 0], [3, 0.253333, 0]], [-0.00771189, [3, -0.253333, 0], [3, 0.0666667, 0]], [-0.175449, [3, -0.0666667, 0], [3, 0.08, 0]], [-0.175449, [3, -0.08, 0], [3, 0.0666667, 0]], [-1.03396, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.03396, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.175449, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.295681, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.2, 0.4, 1.16, 1.36, 1.6, 1.8, 2.4, 2.6, 3])
	keys.append([[0.101113, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.30846, [3, -0.0666667, 0], [3, 0.253333, 0]], [1.30846, [3, -0.253333, 0], [3, 0.0666667, 0]], [0.101113, [3, -0.0666667, 0], [3, 0.08, 0]], [0.101113, [3, -0.08, 0], [3, 0.0666667, 0]], [1.82387, [3, -0.0666667, 0], [3, 0.2, 0]], [1.82387, [3, -0.2, 0], [3, 0.0666667, 0]], [0.101113, [3, -0.0666667, 0.0485374], [3, 0.133333, -0.0970748]], [0.00403843, [3, -0.133333, 0], [3, 0, 0]]])

	try:
	  motion = ALProxy("ALMotion",robotIP,port)
	  motion.angleInterpolationBezier(names, times, keys)
	except BaseException, err:
	  print err
  
if __name__ == "__main__":

    robotIP = "127.0.0.1"#"192.168.11.3"

    port = 55650 #9559 # Insert NAO port


    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    main(robotIP, port)
