# Choregraphe bezier export in Python.

import sys
import time

from naoqi import ALProxy


def main(robotIP, port):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.00292481, [3, -0.04, 0], [3, 0.24, 0]], [0.00292481, [3, -0.24, 0], [3, 0.253333, 0]], [0.00292481, [3, -0.253333, 0], [3, 0.213333, 0]], [0.00292481, [3, -0.213333, 0], [3, 0.253333, 0]], [0.00292481, [3, -0.253333, 0], [3, 0.24, 0]], [0.00292481, [3, -0.24, 0], [3, 0.24, 0]], [0.00292481, [3, -0.24, 0], [3, 0.226667, 0]], [0.00292481, [3, -0.226667, 0], [3, 0.16, 0]], [-0.163853, [3, -0.16, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.00328097, [3, -0.04, 0], [3, 0.24, 0]], [0.00328097, [3, -0.24, 0], [3, 0.253333, 0]], [0.00328097, [3, -0.253333, 0], [3, 0.213333, 0]], [0.00328097, [3, -0.213333, 0], [3, 0.253333, 0]], [0.00328097, [3, -0.253333, 0], [3, 0.24, 0]], [0.00328097, [3, -0.24, 0], [3, 0.24, 0]], [0.00328097, [3, -0.24, 0], [3, 0.226667, 0]], [0.00328097, [3, -0.226667, 0], [3, 0.16, 0]], [-0.00412179, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.813323, [3, -0.04, 0], [3, 0.24, 0]], [-0.121667, [3, -0.24, 0], [3, 0.253333, 0]], [-0.811339, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.121667, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.813323, [3, -0.253333, 0], [3, 0.24, 0]], [-0.121667, [3, -0.24, 0], [3, 0.24, 0]], [-0.811339, [3, -0.24, 0], [3, 0.226667, 0]], [-0.121667, [3, -0.226667, -0.174654], [3, 0.16, 0.123285]], [0.0824761, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.125664, [3, -0.04, 0], [3, 0.24, 0]], [0.0107383, [3, -0.24, 0], [3, 0.253333, 0]], [-0.119803, [3, -0.253333, 0], [3, 0.213333, 0]], [0.0107383, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.125664, [3, -0.253333, 0], [3, 0.24, 0]], [0.0107383, [3, -0.24, 0], [3, 0.24, 0]], [-0.119803, [3, -0.24, 0], [3, 0.226667, 0]], [0.0107383, [3, -0.226667, 0], [3, 0.16, 0]], [-0.124997, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-1.25824, [3, -0.04, 0], [3, 0.24, 0]], [-1.25154, [3, -0.24, -0.00670904], [3, 0.253333, 0.00708176]], [-0.0431955, [3, -0.253333, -0.00984309], [3, 0.213333, 0.00828892]], [-0.0349066, [3, -0.213333, 0], [3, 0.253333, 0]], [-1.25824, [3, -0.253333, 0], [3, 0.24, 0]], [-1.25154, [3, -0.24, -0.00670904], [3, 0.24, 0.00670904]], [-0.0431955, [3, -0.24, -0.0087765], [3, 0.226667, 0.00828892]], [-0.0349066, [3, -0.226667, 0], [3, 0.16, 0]], [-0.407561, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.111834, [3, -0.04, 0], [3, 0.24, 0]], [-0.18101, [3, -0.24, 0], [3, 0.253333, 0]], [-0.137186, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.146608, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.111834, [3, -0.253333, 0], [3, 0.24, 0]], [-0.18101, [3, -0.24, 0], [3, 0.24, 0]], [-0.137186, [3, -0.24, 0], [3, 0.226667, 0]], [-0.146608, [3, -0.226667, 0.00942198], [3, 0.16, -0.00665081]], [-1.19307, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.79, [3, -0.04, 0], [3, 0.24, 0]], [0.82, [3, -0.24, 0], [3, 0.253333, 0]], [0.709792, [3, -0.253333, 0.011628], [3, 0.213333, -0.00979203]], [0.7, [3, -0.213333, 0], [3, 0.253333, 0]], [0.79, [3, -0.253333, -0.0205405], [3, 0.24, 0.0194595]], [0.82, [3, -0.24, 0], [3, 0.24, 0]], [0.709792, [3, -0.24, 0.010368], [3, 0.226667, -0.00979203]], [0.7, [3, -0.226667, 0.00979203], [3, 0.16, -0.00691202]], [0.3037, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.58294, [3, -0.04, 0], [3, 0.24, 0]], [0.0751228, [3, -0.24, 0], [3, 0.253333, 0]], [-0.58294, [3, -0.253333, 0], [3, 0.213333, 0]], [0.0751228, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.58294, [3, -0.253333, 0], [3, 0.24, 0]], [0.0751228, [3, -0.24, 0], [3, 0.24, 0]], [-0.58294, [3, -0.24, 0], [3, 0.226667, 0]], [0.0751228, [3, -0.226667, -0.0643348], [3, 0.16, 0.0454128]], [0.120536, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.0907571, [3, -0.04, 0], [3, 0.24, 0]], [-0.0538528, [3, -0.24, 0], [3, 0.253333, 0]], [0.0903423, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.0538528, [3, -0.213333, 0], [3, 0.253333, 0]], [0.0907571, [3, -0.253333, 0], [3, 0.24, 0]], [-0.0538528, [3, -0.24, 0], [3, 0.24, 0]], [0.0903423, [3, -0.24, 0], [3, 0.226667, 0]], [-0.0538528, [3, -0.226667, 0], [3, 0.16, 0]], [0.0985771, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.0224133, [3, -0.04, 0], [3, 0.24, 0]], [0.0224133, [3, -0.24, 0], [3, 0.253333, 0]], [0.0190761, [3, -0.253333, 0], [3, 0.213333, 0]], [0.0224133, [3, -0.213333, 0], [3, 0.253333, 0]], [0.0224133, [3, -0.253333, 0], [3, 0.24, 0]], [0.0224133, [3, -0.24, 0], [3, 0.24, 0]], [0.0190761, [3, -0.24, 0], [3, 0.226667, 0]], [0.0224133, [3, -0.226667, 0], [3, 0.16, 0]], [-0.163161, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[1.4591, [3, -0.04, 0], [3, 0.24, 0]], [0.09027, [3, -0.24, 0], [3, 0.253333, 0]], [1.45517, [3, -0.253333, 0], [3, 0.213333, 0]], [0.09027, [3, -0.213333, 0], [3, 0.253333, 0]], [1.4591, [3, -0.253333, 0], [3, 0.24, 0]], [0.09027, [3, -0.24, 0], [3, 0.24, 0]], [1.45517, [3, -0.24, 0], [3, 0.226667, 0]], [0.09027, [3, -0.226667, 0.246305], [3, 0.16, -0.173862]], [-0.0835922, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.307925, [3, -0.04, 0], [3, 0.24, 0]], [-0.184024, [3, -0.24, -0.123901], [3, 0.253333, 0.130784]], [1.57254, [3, -0.253333, 0], [3, 0.213333, 0]], [1.08734, [3, -0.213333, 0.286547], [3, 0.253333, -0.340275]], [-0.307925, [3, -0.253333, 0], [3, 0.24, 0]], [-0.184024, [3, -0.24, -0.123901], [3, 0.24, 0.123901]], [1.57254, [3, -0.24, 0], [3, 0.226667, 0]], [1.08734, [3, -0.226667, 0], [3, 0.16, 0]], [1.47416, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.242753, [3, -0.04, 0], [3, 0.24, 0]], [0.576681, [3, -0.24, 0], [3, 0.253333, 0]], [0.321141, [3, -0.253333, 0], [3, 0.213333, 0]], [0.413643, [3, -0.213333, 0], [3, 0.253333, 0]], [0.242753, [3, -0.253333, 0], [3, 0.24, 0]], [0.576681, [3, -0.24, 0], [3, 0.24, 0]], [0.321141, [3, -0.24, 0], [3, 0.226667, 0]], [0.413643, [3, -0.226667, 0], [3, 0.16, 0]], [0.185942, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-1.82052, [3, -0.04, 0], [3, 0.24, 0]], [-1.48249, [3, -0.24, 0], [3, 0.253333, 0]], [-1.48758, [3, -0.253333, 0], [3, 0.213333, 0]], [-1.48249, [3, -0.213333, 0], [3, 0.253333, 0]], [-1.82052, [3, -0.253333, 0], [3, 0.24, 0]], [-1.48249, [3, -0.24, 0], [3, 0.24, 0]], [-1.48758, [3, -0.24, 0], [3, 0.226667, 0]], [-1.48249, [3, -0.226667, -0.00509463], [3, 0.16, 0.00359621]], [0.0971365, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.813323, [3, -0.04, 0], [3, 0.24, 0]], [-0.108295, [3, -0.24, 0], [3, 0.253333, 0]], [-0.811301, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.108295, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.813323, [3, -0.253333, 0], [3, 0.24, 0]], [-0.108295, [3, -0.24, 0], [3, 0.24, 0]], [-0.811301, [3, -0.24, 0], [3, 0.226667, 0]], [-0.108295, [3, -0.226667, -0.174739], [3, 0.16, 0.123345]], [0.0829513, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.125664, [3, -0.04, 0], [3, 0.24, 0]], [-0.0130316, [3, -0.24, 0], [3, 0.253333, 0]], [0.119704, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.0130316, [3, -0.213333, 0], [3, 0.253333, 0]], [0.125664, [3, -0.253333, 0], [3, 0.24, 0]], [-0.0130316, [3, -0.24, 0], [3, 0.24, 0]], [0.119704, [3, -0.24, 0], [3, 0.226667, 0]], [-0.0130316, [3, -0.226667, 0], [3, 0.16, 0]], [0.128677, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.264156, [3, -0.04, 0], [3, 0.24, 0]], [0.264156, [3, -0.24, 0], [3, 0.253333, 0]], [1.25672, [3, -0.253333, -0.00611834], [3, 0.213333, 0.00515228]], [1.26187, [3, -0.213333, 0], [3, 0.253333, 0]], [0.264156, [3, -0.253333, 0], [3, 0.24, 0]], [0.264156, [3, -0.24, 0], [3, 0.24, 0]], [1.25672, [3, -0.24, -0.00545536], [3, 0.226667, 0.00515228]], [1.26187, [3, -0.226667, 0], [3, 0.16, 0]], [0.415888, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.782688, [3, -0.04, 0], [3, 0.24, 0]], [0.782688, [3, -0.24, 0], [3, 0.253333, 0]], [0.185961, [3, -0.253333, 0.00320836], [3, 0.213333, -0.00270178]], [0.18326, [3, -0.213333, 0], [3, 0.253333, 0]], [0.782688, [3, -0.253333, 0], [3, 0.24, 0]], [0.782688, [3, -0.24, 0], [3, 0.24, 0]], [0.185961, [3, -0.24, 0.0028607], [3, 0.226667, -0.00270178]], [0.18326, [3, -0.226667, 0], [3, 0.16, 0]], [1.18733, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[0.966797, [3, -0.04, 0], [3, 0.24, 0]], [0.966797, [3, -0.24, 0], [3, 0.253333, 0]], [0.859321, [3, -0.253333, 0.0283728], [3, 0.213333, -0.0238929]], [0.81, [3, -0.213333, 0], [3, 0.253333, 0]], [0.966797, [3, -0.253333, 0], [3, 0.24, 0]], [0.966797, [3, -0.24, 0], [3, 0.24, 0]], [0.859321, [3, -0.24, 0.0268795], [3, 0.226667, -0.0253862]], [0.81, [3, -0.226667, 0.049321], [3, 0.16, -0.0348148]], [0.304717, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.58294, [3, -0.04, 0], [3, 0.24, 0]], [0.0362564, [3, -0.24, 0], [3, 0.253333, 0]], [-0.58294, [3, -0.253333, 0], [3, 0.213333, 0]], [0.0362564, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.58294, [3, -0.253333, 0], [3, 0.24, 0]], [0.0362564, [3, -0.24, 0], [3, 0.24, 0]], [-0.58294, [3, -0.24, 0], [3, 0.226667, 0]], [0.0362564, [3, -0.226667, -0.128083], [3, 0.16, 0.0904114]], [0.126668, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.0907571, [3, -0.04, 0], [3, 0.24, 0]], [0.0108124, [3, -0.24, 0], [3, 0.253333, 0]], [-0.0863928, [3, -0.253333, 0], [3, 0.213333, 0]], [0.0108124, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.0907571, [3, -0.253333, 0], [3, 0.24, 0]], [0.0108124, [3, -0.24, 0], [3, 0.24, 0]], [-0.0863928, [3, -0.24, 0], [3, 0.226667, 0]], [0.0108124, [3, -0.226667, 0], [3, 0.16, 0]], [-0.098975, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.164061, [3, -0.04, 0], [3, 0.24, 0]], [0.0224133, [3, -0.24, 0], [3, 0.253333, 0]], [0.0224133, [3, -0.253333, 0], [3, 0.213333, 0]], [0.0224133, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.164061, [3, -0.253333, 0], [3, 0.24, 0]], [0.0224133, [3, -0.24, 0], [3, 0.24, 0]], [0.0224133, [3, -0.24, 0], [3, 0.226667, 0]], [0.0224133, [3, -0.226667, 0], [3, 0.16, 0]], [-0.163161, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[1.4591, [3, -0.04, 0], [3, 0.24, 0]], [0.112392, [3, -0.24, 0], [3, 0.253333, 0]], [1.45523, [3, -0.253333, 0], [3, 0.213333, 0]], [0.112392, [3, -0.213333, 0], [3, 0.253333, 0]], [1.4591, [3, -0.253333, 0], [3, 0.24, 0]], [0.112392, [3, -0.24, 0], [3, 0.24, 0]], [1.45523, [3, -0.24, 0], [3, 0.226667, 0]], [0.112392, [3, -0.226667, 0.27653], [3, 0.16, -0.195197]], [-0.0828058, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[1.54202, [3, -0.04, 0], [3, 0.24, 0]], [1.54202, [3, -0.24, 0], [3, 0.253333, 0]], [-0.264389, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.181514, [3, -0.213333, -0.0828752], [3, 0.253333, 0.0984143]], [1.54202, [3, -0.253333, 0], [3, 0.24, 0]], [1.54202, [3, -0.24, 0], [3, 0.24, 0]], [-0.264389, [3, -0.24, 0], [3, 0.226667, 0]], [-0.181514, [3, -0.226667, -0.0828752], [3, 0.16, 0.0585002]], [1.47076, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[-0.338519, [3, -0.04, 0], [3, 0.24, 0]], [-0.338519, [3, -0.24, 0], [3, 0.253333, 0]], [-0.233916, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.586431, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.338519, [3, -0.253333, 0], [3, 0.24, 0]], [-0.338519, [3, -0.24, 0], [3, 0.24, 0]], [-0.233916, [3, -0.24, 0], [3, 0.226667, 0]], [-0.586431, [3, -0.226667, 0], [3, 0.16, 0]], [-0.184563, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.12, 0.84, 1.6, 2.24, 3, 3.72, 4.44, 5.12, 5.6])
    keys.append([[1.49109, [3, -0.04, 0], [3, 0.24, 0]], [1.49109, [3, -0.24, 0], [3, 0.253333, 0]], [1.78418, [3, -0.253333, 0], [3, 0.213333, 0]], [1.48528, [3, -0.213333, 0], [3, 0.253333, 0]], [1.49109, [3, -0.253333, 0], [3, 0.24, 0]], [1.49109, [3, -0.24, 0], [3, 0.24, 0]], [1.78418, [3, -0.24, 0], [3, 0.226667, 0]], [1.48528, [3, -0.226667, 0.298905], [3, 0.16, -0.210992]], [0.102507, [3, -0.16, 0], [3, 0, 0]]])

    try:
        # uncomment the following line and modify the IP if you use this script outside Choregraphe.
        motion = ALProxy("ALMotion", robotIP, port)
        #  motion = ALProxy("ALMotion")
        motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
        print err


if __name__ == "__main__":
    robotIP = "127.0.0.1"
    port = 9559

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    start = time.time()
    main(robotIP, port)
    end = time.time()
    duration = end - start
    print ("%.2f seconds elapsed" % duration)
