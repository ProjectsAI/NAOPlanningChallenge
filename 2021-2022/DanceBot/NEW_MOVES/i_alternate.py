# Choregraphe bezier export in Python.

import sys
import time

from naoqi import ALProxy


def main(robotIP, port):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00111594, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.338594, [3, -0.133333, 0], [3, 0.16, 0]], [-0.375246, [3, -0.16, 0], [3, 0.16, 0]], [0.338594, [3, -0.16, 0], [3, 0.146667, 0]], [-0.191986, [3, -0.146667, 0], [3, 0.133333, 0]], [0.338594, [3, -0.133333, 0], [3, 0.12, 0]], [-0.375246, [3, -0.12, 0], [3, 0.12, 0]], [0.338594, [3, -0.12, 0], [3, 0.133333, 0]], [-0.191986, [3, -0.133333, 0], [3, 0.133333, 0]], [0.338594, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[0.00322723, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00322723, [3, -0.133333, 0], [3, 0.16, 0]], [-0.469494, [3, -0.16, 0], [3, 0.16, 0]], [0.00322724, [3, -0.16, -0.174533], [3, 0.146667, 0.159989]], [0.534071, [3, -0.146667, 0], [3, 0.133333, 0]], [0.00322724, [3, -0.133333, 0.176064], [3, 0.12, -0.158458]], [-0.469494, [3, -0.12, 0], [3, 0.12, 0]], [0.00322724, [3, -0.12, -0.158458], [3, 0.133333, 0.176064]], [0.534071, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00322724, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00487319, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00487319, [3, -0.133333, 0], [3, 0.16, 0]], [-0.610865, [3, -0.16, 0], [3, 0.16, 0]], [-0.00487319, [3, -0.16, 0], [3, 0.146667, 0]], [-0.516617, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00487319, [3, -0.133333, 0], [3, 0.12, 0]], [-0.610865, [3, -0.12, 0], [3, 0.12, 0]], [-0.00487319, [3, -0.12, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00487319, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.04, 0.44, 1.4, 1.84, 2.24, 2.96, 3.36, 3.76])
    keys.append([[-0.0074831, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.0074831, [3, -0.133333, 0], [3, 0.32, 0]], [-0.0074831, [3, -0.32, 0], [3, 0.146667, 0]], [-0.0074831, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.0074831, [3, -0.133333, 0], [3, 0.24, 0]], [-0.0074831, [3, -0.24, 0], [3, 0.133333, 0]], [-0.0074831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0074831, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.0377746, [3, -0.0133333, 0], [3, 0.133333, 0]], [-1.54277, [3, -0.133333, 0], [3, 0.16, 0]], [-1.54196, [3, -0.16, 0], [3, 0.16, 0]], [-1.54277, [3, -0.16, 0.000461885], [3, 0.146667, -0.000423394]], [-1.54462, [3, -0.146667, 0], [3, 0.133333, 0]], [-1.54277, [3, -0.133333, -0.000466053], [3, 0.12, 0.000419448]], [-1.54196, [3, -0.12, 0], [3, 0.12, 0]], [-1.54277, [3, -0.12, 0.000419427], [3, 0.133333, -0.00046603]], [-1.54462, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.54277, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00838177, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.0209402, [3, -0.133333, -0.00196249], [3, 0.16, 0.00235499]], [0.0232952, [3, -0.16, 0], [3, 0.16, 0]], [0.0209401, [3, -0.16, 0.00235507], [3, 0.146667, -0.00215882]], [-1.37008, [3, -0.146667, 0], [3, 0.133333, 0]], [0.0209401, [3, -0.133333, -0.00261683], [3, 0.12, 0.00235515]], [0.0232953, [3, -0.12, 0], [3, 0.12, 0]], [0.0209401, [3, -0.12, 0.00235515], [3, 0.133333, -0.00261683]], [-1.37008, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0209401, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[0, [3, -0.0133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.16, 0]], [0, [3, -0.16, 0], [3, 0.16, 0]], [0, [3, -0.16, 0], [3, 0.146667, 0]], [0.83, [3, -0.146667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.12, 0]], [0, [3, -0.12, 0], [3, 0.12, 0]], [0, [3, -0.12, 0], [3, 0.133333, 0]], [0.83, [3, -0.133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00626553, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00626553, [3, -0.133333, 0], [3, 0.16, 0]], [-0.321141, [3, -0.16, 0], [3, 0.16, 0]], [-0.00626554, [3, -0.16, 0], [3, 0.146667, 0]], [-0.862193, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00626554, [3, -0.133333, 0], [3, 0.12, 0]], [-0.321141, [3, -0.12, 0], [3, 0.12, 0]], [-0.00626554, [3, -0.12, 0], [3, 0.133333, 0]], [-0.862193, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00626554, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[0.00472501, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00472501, [3, -0.133333, 0], [3, 0.16, 0]], [0.00472501, [3, -0.16, 0], [3, 0.16, 0]], [0.00472501, [3, -0.16, 0], [3, 0.146667, 0]], [0.00472501, [3, -0.146667, 0], [3, 0.133333, 0]], [0.00472501, [3, -0.133333, 0], [3, 0.12, 0]], [0.00472501, [3, -0.12, 0], [3, 0.12, 0]], [0.00472501, [3, -0.12, 0], [3, 0.133333, 0]], [0.00472501, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00472501, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00219423, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0.16, 0]], [-0.00219423, [3, -0.16, 0], [3, 0.16, 0]], [-0.00219423, [3, -0.16, 0], [3, 0.146667, 0]], [-0.00219423, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0.12, 0]], [-0.00219423, [3, -0.12, 0], [3, 0.12, 0]], [-0.00219423, [3, -0.12, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[0.00974638, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00974638, [3, -0.133333, 0], [3, 0.16, 0]], [0.928515, [3, -0.16, 0], [3, 0.16, 0]], [0.00974639, [3, -0.16, 0], [3, 0.146667, 0]], [1.31598, [3, -0.146667, 0], [3, 0.133333, 0]], [0.00974639, [3, -0.133333, 0], [3, 0.12, 0]], [0.928515, [3, -0.12, 0], [3, 0.12, 0]], [0.00974639, [3, -0.12, 0], [3, 0.133333, 0]], [1.31598, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00974639, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[0.00844207, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.0096079, [3, -0.133333, 0], [3, 0.16, 0]], [-0.00719858, [3, -0.16, 0], [3, 0.16, 0]], [-0.0096079, [3, -0.16, 0], [3, 0.28, 0]], [-0.0096079, [3, -0.28, 0], [3, 0.12, 0]], [-0.00719858, [3, -0.12, 0], [3, 0.12, 0]], [-0.0096079, [3, -0.12, 0], [3, 0.266667, 0]], [-0.0096079, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[0.0178413, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.396488, [3, -0.133333, -0.00327674], [3, 0.16, 0.00393209]], [0.40042, [3, -0.16, 0], [3, 0.16, 0]], [0.396488, [3, -0.16, 0], [3, 0.28, 0]], [0.396488, [3, -0.28, 0], [3, 0.12, 0]], [0.40042, [3, -0.12, 0], [3, 0.12, 0]], [0.396488, [3, -0.12, 0], [3, 0.266667, 0]], [0.396488, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[-0.00335935, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00335935, [3, -0.133333, 0], [3, 0.16, 0]], [-0.00335935, [3, -0.16, 0], [3, 0.16, 0]], [-0.00335934, [3, -0.16, 0], [3, 0.28, 0]], [-0.00335934, [3, -0.28, 0], [3, 0.12, 0]], [-0.00335934, [3, -0.12, 0], [3, 0.12, 0]], [-0.00335934, [3, -0.12, 0], [3, 0.266667, 0]], [-0.00335934, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00487319, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00487319, [3, -0.133333, 0], [3, 0.16, 0]], [-0.610865, [3, -0.16, 0], [3, 0.16, 0]], [-0.00487319, [3, -0.16, 0], [3, 0.146667, 0]], [-0.516617, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00487319, [3, -0.133333, 0], [3, 0.12, 0]], [-0.610865, [3, -0.12, 0], [3, 0.12, 0]], [-0.00487319, [3, -0.12, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00487319, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.04, 0.44, 1.4, 1.84, 2.24, 2.96, 3.36, 3.76])
    keys.append([[0.00445038, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00445038, [3, -0.133333, 0], [3, 0.32, 0]], [0.00445038, [3, -0.32, 0], [3, 0.146667, 0]], [0.00445038, [3, -0.146667, 0], [3, 0.133333, 0]], [0.00445038, [3, -0.133333, 0], [3, 0.24, 0]], [0.00445038, [3, -0.24, 0], [3, 0.133333, 0]], [0.00445038, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00445038, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[0.0377746, [3, -0.0133333, 0], [3, 0.133333, 0]], [1.53351, [3, -0.133333, 0], [3, 0.16, 0]], [1.52937, [3, -0.16, 0], [3, 0.16, 0]], [1.53351, [3, -0.16, 0], [3, 0.146667, 0]], [1.53351, [3, -0.146667, 0], [3, 0.133333, 0]], [1.53351, [3, -0.133333, 0], [3, 0.12, 0]], [1.52937, [3, -0.12, 0], [3, 0.12, 0]], [1.53351, [3, -0.12, 0], [3, 0.133333, 0]], [1.53351, [3, -0.133333, 0], [3, 0.133333, 0]], [1.53351, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[0.00838177, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.022304, [3, -0.133333, 0], [3, 0.16, 0]], [1.41997, [3, -0.16, 0], [3, 0.16, 0]], [-0.0223039, [3, -0.16, 0], [3, 0.28, 0]], [-0.0223039, [3, -0.28, 0], [3, 0.12, 0]], [1.41997, [3, -0.12, 0], [3, 0.12, 0]], [-0.0223039, [3, -0.12, 0], [3, 0.266667, 0]], [-0.0223039, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[0, [3, -0.0133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.16, 0]], [0.88, [3, -0.16, 0], [3, 0.16, 0]], [0, [3, -0.16, 0], [3, 0.28, 0]], [0, [3, -0.28, 0], [3, 0.12, 0]], [0.88, [3, -0.12, 0], [3, 0.12, 0]], [0, [3, -0.12, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00626553, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00626553, [3, -0.133333, 0], [3, 0.16, 0]], [-0.321141, [3, -0.16, 0], [3, 0.16, 0]], [-0.00626554, [3, -0.16, 0], [3, 0.146667, 0]], [-0.862193, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00626554, [3, -0.133333, 0], [3, 0.12, 0]], [-0.321141, [3, -0.12, 0], [3, 0.12, 0]], [-0.00626554, [3, -0.12, 0], [3, 0.133333, 0]], [-0.862193, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00626554, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00461215, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00461215, [3, -0.133333, 0], [3, 0.16, 0]], [-0.00461215, [3, -0.16, 0], [3, 0.16, 0]], [-0.00461215, [3, -0.16, 0], [3, 0.146667, 0]], [-0.00461215, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00461215, [3, -0.133333, 0], [3, 0.12, 0]], [-0.00461215, [3, -0.12, 0], [3, 0.12, 0]], [-0.00461215, [3, -0.12, 0], [3, 0.133333, 0]], [-0.00461215, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00461215, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[-0.00219423, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0.16, 0]], [-0.0226893, [3, -0.16, 0], [3, 0.16, 0]], [-0.00219423, [3, -0.16, 0], [3, 0.146667, 0]], [-0.00219423, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0.12, 0]], [-0.0226893, [3, -0.12, 0], [3, 0.12, 0]], [-0.00219423, [3, -0.12, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00219423, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.04, 0.44, 0.92, 1.4, 1.84, 2.24, 2.6, 2.96, 3.36, 3.76])
    keys.append([[0.00974638, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00974638, [3, -0.133333, 0], [3, 0.16, 0]], [0.928515, [3, -0.16, 0], [3, 0.16, 0]], [0.00974639, [3, -0.16, 0], [3, 0.146667, 0]], [1.31598, [3, -0.146667, 0], [3, 0.133333, 0]], [0.00974639, [3, -0.133333, 0], [3, 0.12, 0]], [0.928515, [3, -0.12, 0], [3, 0.12, 0]], [0.00974639, [3, -0.12, 0], [3, 0.133333, 0]], [1.31598, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00974639, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[0.00844208, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00432765, [3, -0.133333, 0], [3, 0.16, 0]], [0.0130131, [3, -0.16, 0], [3, 0.16, 0]], [0.00432765, [3, -0.16, 0], [3, 0.28, 0]], [0.00432765, [3, -0.28, 0], [3, 0.12, 0]], [0.0130131, [3, -0.12, 0], [3, 0.12, 0]], [0.00432765, [3, -0.12, 0], [3, 0.266667, 0]], [0.00432765, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[-0.0178413, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.394938, [3, -0.133333, 0.00664084], [3, 0.16, -0.00796901]], [-0.402907, [3, -0.16, 0], [3, 0.16, 0]], [-0.394938, [3, -0.16, 0], [3, 0.28, 0]], [-0.394938, [3, -0.28, 0], [3, 0.12, 0]], [-0.402908, [3, -0.12, 0], [3, 0.12, 0]], [-0.394938, [3, -0.12, 0], [3, 0.266667, 0]], [-0.394938, [3, -0.266667, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.04, 0.44, 0.92, 1.4, 2.24, 2.6, 2.96, 3.76])
    keys.append([[0.00679194, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.00679194, [3, -0.133333, 0], [3, 0.16, 0]], [0.00679194, [3, -0.16, 0], [3, 0.16, 0]], [0.00679193, [3, -0.16, 0], [3, 0.28, 0]], [0.00679193, [3, -0.28, 0], [3, 0.12, 0]], [0.00679193, [3, -0.12, 0], [3, 0.12, 0]], [0.00679193, [3, -0.12, 0], [3, 0.266667, 0]], [0.00679193, [3, -0.266667, 0], [3, 0, 0]]])

    try:
        # uncomment the following line and modify the IP if you use this script outside Choregraphe.
        motion = ALProxy("ALMotion", robotIP, port)
        #  motion = ALProxy("ALMotion")
        motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
        print err


if __name__ == "__main__":
    robotIP = "127.0.0.1"
    port = 9559

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    start = time.time()
    main(robotIP, port)
    end = time.time()
    duration = end - start
    print ("%.2f seconds elapsed" % duration)