import sys
import time
import numpy as np
from naoqi import ALProxy

start = time.time()

def main(robotIP, port, unit_time):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.0735901, [3, -0.173333, 0], [3, 0.12, 0]], [0.294486, [3, -0.12, 0], [3, 0.16, 0]], [-0.227074, [3, -0.16, 0.00678143], [3, 0.253333, -0.0107373]], [-0.237812, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[-0.119694, [3, -0.173333, 0], [3, 0.12, 0]], [0.501576, [3, -0.12, 0], [3, 0.16, 0]], [-0.472515, [3, -0.16, 0], [3, 0.253333, 0]], [-4.19617e-05, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.0966001, [3, -0.173333, 0], [3, 0.12, 0]], [-0.190258, [3, -0.12, 0.0837127], [3, 0.16, -0.111617]], [-0.489389, [3, -0.16, 0], [3, 0.253333, 0]], [0.0981341, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[-0.251533, [3, -0.173333, 0], [3, 0.12, 0]], [0.0583338, [3, -0.12, 0], [3, 0.16, 0]], [-0.211651, [3, -0.16, 0], [3, 0.253333, 0]], [-0.115008, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[-1.42198, [3, -0.173333, 0], [3, 0.12, 0]], [-1.42198, [3, -0.12, 0], [3, 0.16, 0]], [-1.52936, [3, -0.16, 0], [3, 0.133333, 0]], [-0.414139, [3, -0.133333, 0], [3, 0.12, 0]], [-0.417205, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[-0.016916, [3, -0.173333, 0], [3, 0.12, 0]], [-0.016916, [3, -0.12, 0], [3, 0.16, 0]], [-0.237812, [3, -0.16, 0.220896], [3, 0.133333, -0.18408]], [-1.28247, [3, -0.133333, 0], [3, 0.12, 0]], [-1.18582, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[0.8484, [3, -0.173333, 0], [3, 0.12, 0]], [0.8484, [3, -0.12, 0], [3, 0.16, 0]], [0.8472, [3, -0.16, 0.00120002], [3, 0.133333, -0.00100002]], [0.3056, [3, -0.133333, 0], [3, 0.12, 0]], [0.3056, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.162646, [3, -0.173333, 0], [3, 0.12, 0]], [0.0429941, [3, -0.12, 0.09971], [3, 0.16, -0.132947]], [-0.535324, [3, -0.16, 0], [3, 0.253333, 0]], [0.14117, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.312978, [3, -0.173333, 0], [3, 0.12, 0]], [-0.260738, [3, -0.12, 0], [3, 0.16, 0]], [0.431096, [3, -0.16, 0], [3, 0.253333, 0]], [0.113558, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[-0.171766, [3, -0.173333, 0], [3, 0.12, 0]], [-0.240796, [3, -0.12, 0.0578538], [3, 0.16, -0.0771383]], [-0.576742, [3, -0.16, 0], [3, 0.253333, 0]], [-0.1733, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[-0.092082, [3, -0.173333, 0], [3, 0.12, 0]], [0.423342, [3, -0.12, -0.204022], [3, 0.16, 0.272029]], [1.33607, [3, -0.16, 0], [3, 0.253333, 0]], [-0.092082, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[1.41891, [3, -0.173333, 0], [3, 0.12, 0]], [1.42044, [3, -0.12, 0], [3, 0.16, 0]], [1.14279, [3, -0.16, 0], [3, 0.133333, 0]], [1.43271, [3, -0.133333, -0.0635132], [3, 0.12, 0.0571618]], [1.50481, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[0.780764, [3, -0.173333, 0], [3, 0.12, 0]], [0.771559, [3, -0.12, 0.00920488], [3, 0.16, -0.0122732]], [0.67952, [3, -0.16, 0.0789311], [3, 0.133333, -0.0657759]], [0.337438, [3, -0.133333, 0.0963459], [3, 0.12, -0.0867113]], [0.130348, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[-0.920441, [3, -0.173333, 0], [3, 0.12, 0]], [-0.920441, [3, -0.12, 0], [3, 0.16, 0]], [-0.38661, [3, -0.16, -0.18408], [3, 0.133333, 0.1534]], [0.091998, [3, -0.133333, 0], [3, 0.12, 0]], [0.0889301, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[-0.095066, [3, -0.173333, 0], [3, 0.12, 0]], [-0.366584, [3, -0.12, 0.0797681], [3, 0.16, -0.106357]], [-0.653443, [3, -0.16, 0], [3, 0.253333, 0]], [0.105888, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.00771189, [3, -0.173333, 0], [3, 0.12, 0]], [0.391212, [3, -0.12, 0], [3, 0.16, 0]], [0.021518, [3, -0.16, 0], [3, 0.253333, 0]], [0.07214, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[1.29627, [3, -0.173333, 0], [3, 0.12, 0]], [1.29474, [3, -0.12, 0.00153411], [3, 0.16, -0.00204549]], [1.27019, [3, -0.16, 0.0245428], [3, 0.133333, -0.0204523]], [0.417291, [3, -0.133333, 0], [3, 0.12, 0]], [0.418823, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[-0.217869, [3, -0.173333, 0], [3, 0.12, 0]], [-0.222472, [3, -0.12, 0], [3, 0.16, 0]], [-0.193327, [3, -0.16, -0.0291453], [3, 0.133333, 0.0242877]], [1.17807, [3, -0.133333, 0], [3, 0.12, 0]], [1.16273, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[0.9304, [3, -0.173333, 0], [3, 0.12, 0]], [0.9304, [3, -0.12, 0], [3, 0.16, 0]], [0.9284, [3, -0.16, 0.00200003], [3, 0.133333, -0.00166669]], [0.3096, [3, -0.133333, 0.00355555], [3, 0.12, -0.00319999]], [0.3064, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.133416, [3, -0.173333, 0], [3, 0.12, 0]], [0.131882, [3, -0.12, 0.00153396], [3, 0.16, -0.00204529]], [-0.0767419, [3, -0.16, 0], [3, 0.253333, 0]], [0.130348, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.046062, [3, -0.173333, 0], [3, 0.12, 0]], [-0.671851, [3, -0.12, 0], [3, 0.16, 0]], [0.0767419, [3, -0.16, 0], [3, 0.253333, 0]], [-0.06592, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[-0.171766, [3, -0.173333, 0], [3, 0.12, 0]], [-0.240796, [3, -0.12, 0.0578538], [3, 0.16, -0.0771383]], [-0.576742, [3, -0.16, 0], [3, 0.253333, 0]], [-0.1733, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.52, 0.88, 1.36, 2.12])
    keys.append([[0.131966, [3, -0.173333, 0], [3, 0.12, 0]], [0.455641, [3, -0.12, -0.147702], [3, 0.16, 0.196936]], [1.16588, [3, -0.16, 0], [3, 0.253333, 0]], [-0.0923279, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[1.18122, [3, -0.173333, 0], [3, 0.12, 0]], [1.18122, [3, -0.12, 0], [3, 0.16, 0]], [1.15975, [3, -0.16, 0], [3, 0.133333, 0]], [1.37911, [3, -0.133333, -0.0575922], [3, 0.12, 0.051833]], [1.48802, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[-0.638187, [3, -0.173333, 0], [3, 0.12, 0]], [-0.639721, [3, -0.12, 0], [3, 0.16, 0]], [-0.630516, [3, -0.16, -0.00920488], [3, 0.133333, 0.00767074]], [-0.319114, [3, -0.133333, -0.0925782], [3, 0.12, 0.0833204]], [-0.10282, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.52, 0.88, 1.36, 1.76, 2.12])
    keys.append([[0.825251, [3, -0.173333, 0], [3, 0.12, 0]], [0.825251, [3, -0.12, 0], [3, 0.16, 0]], [0.812978, [3, -0.16, 0.0122732], [3, 0.133333, -0.0102276]], [0.0398422, [3, -0.133333, 0], [3, 0.12, 0]], [0.131882, [3, -0.12, 0], [3, 0, 0]]])

    mul = unit_time/2.18
    times_unit = [list(np.array(t, dtype=float)*mul) for t in times]

    try:
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times_unit, keys)
    except BaseException, err:
        print err

if __name__ == "__main__":
    robotIP = "127.0.0.1" #"192.168.1.11"
    port = 9559 # Insert NAO port

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    unit_time = float(sys.argv[3])

    main(robotIP, port, unit_time)

end = time.time()
print(end-start)
