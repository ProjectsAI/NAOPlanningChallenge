import sys
import time
import numpy as np
from naoqi import ALProxy

start = time.time()

def main(robotIP, port, unit_time):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.136568, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.268493, [3, -0.12, 0], [3, 0.173333, 0]], [0.118076, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.268493, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.144238, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.021518, [3, -0.0666667, 0], [3, 0.12, 0]], [0.384992, [3, -0.12, 0], [3, 0.173333, 0]], [-0.214803, [3, -0.173333, 0], [3, 0.173333, 0]], [0.384992, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.032256, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.095066, [3, -0.0666667, 0], [3, 0.12, 0]], [0.174835, [3, -0.12, -0.0031851], [3, 0.173333, 0.00460069]], [0.179436, [3, -0.173333, 0], [3, 0.173333, 0]], [0.174835, [3, -0.173333, 0.00460069], [3, 0.173333, -0.00460069]], [0.093532, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.116542, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.0720561, [3, -0.12, 0], [3, 0.173333, 0]], [-0.141086, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.0720561, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.116542, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.2, 0.56, 0.76, 1.08, 1.28, 1.6, 2.12])
    keys.append([[-0.38806, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.199378, [3, -0.12, 0], [3, 0.0666667, 0]], [-1.22562, [3, -0.0666667, 0], [3, 0.106667, 0]], [-0.391128, [3, -0.106667, 0], [3, 0.0666667, 0]], [-1.22562, [3, -0.0666667, 0], [3, 0.106667, 0]], [-0.199378, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.427944, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.2, 0.56, 0.76, 1.08, 1.28, 1.6, 2.12])
    keys.append([[-1.20883, [3, -0.0666667, 0], [3, 0.12, 0]], [-1.56165, [3, -0.12, 0], [3, 0.0666667, 0]], [-0.803859, [3, -0.0666667, -0.15694], [3, 0.106667, 0.251104]], [-0.337522, [3, -0.106667, 0], [3, 0.0666667, 0]], [-0.803859, [3, -0.0666667, 0.15694], [3, 0.106667, -0.251104]], [-1.56165, [3, -0.106667, 0], [3, 0.173333, 0]], [-1.17509, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.2, 0.56, 0.76, 1.08, 1.28, 1.6, 2.12])
    keys.append([[0.3056, [3, -0.0666667, 0], [3, 0.12, 0]], [0.8592, [3, -0.12, 0], [3, 0.0666667, 0]], [0.8592, [3, -0.0666667, 0], [3, 0.106667, 0]], [0.8592, [3, -0.106667, 0], [3, 0.0666667, 0]], [0.8592, [3, -0.0666667, 0], [3, 0.106667, 0]], [0.8592, [3, -0.106667, 0], [3, 0.173333, 0]], [0.3048, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.136568, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.243864, [3, -0.12, 0], [3, 0.173333, 0]], [0.0552659, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.243864, [3, -0.173333, 0], [3, 0.173333, 0]], [0.138102, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.116626, [3, -0.0666667, 0], [3, 0.12, 0]], [0.066004, [3, -0.12, 0], [3, 0.173333, 0]], [0.142704, [3, -0.173333, 0], [3, 0.173333, 0]], [0.066004, [3, -0.173333, 0], [3, 0.173333, 0]], [0.11816, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.1733, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.371186, [3, -0.12, 0.0497853], [3, 0.173333, -0.0719121]], [-0.538392, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.371186, [3, -0.173333, -0.0611044], [3, 0.173333, 0.0611044]], [-0.171766, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.090548, [3, -0.0666667, 0], [3, 0.12, 0]], [0.223922, [3, -0.12, 0], [3, 0.173333, 0]], [-0.00310993, [3, -0.173333, 0], [3, 0.173333, 0]], [0.223922, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.090548, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.2, 0.56, 0.76, 1.08, 1.28, 1.6, 2.12])
    keys.append([[1.53089, [3, -0.0666667, 0], [3, 0.12, 0]], [-1.08611, [3, -0.12, 0], [3, 0.0666667, 0]], [0.759288, [3, -0.0666667, -0.125596], [3, 0.106667, 0.200954]], [0.960242, [3, -0.106667, 0], [3, 0.0666667, 0]], [0.759288, [3, -0.0666667, 0.200954], [3, 0.106667, -0.321526]], [-1.08611, [3, -0.106667, 0], [3, 0.173333, 0]], [1.48027, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.2, 0.56, 0.76, 1.08, 1.28, 1.6, 2.12])
    keys.append([[0.130348, [3, -0.0666667, 0], [3, 0.12, 0]], [0.636569, [3, -0.12, 0], [3, 0.0666667, 0]], [0.228525, [3, -0.0666667, 0.121888], [3, 0.106667, -0.195021]], [-0.314159, [3, -0.106667, 0], [3, 0.0666667, 0]], [0.228525, [3, -0.0666667, -0.121888], [3, 0.106667, 0.195021]], [0.636569, [3, -0.106667, 0], [3, 0.173333, 0]], [0.0873961, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.2, 0.56, 0.76, 1.08, 1.28, 1.6, 2.12])
    keys.append([[0.0843279, [3, -0.0666667, 0], [3, 0.12, 0]], [0.900415, [3, -0.12, -0.245879], [3, 0.0666667, 0.136599]], [1.23176, [3, -0.0666667, 0], [3, 0.106667, 0]], [0.730143, [3, -0.106667, 0], [3, 0.0666667, 0]], [1.23176, [3, -0.0666667, 0], [3, 0.106667, 0]], [0.900415, [3, -0.106667, 0.137914], [3, 0.173333, -0.22411]], [0.145688, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.101286, [3, -0.0666667, 0], [3, 0.12, 0]], [0.11049, [3, -0.12, 0], [3, 0.173333, 0]], [0.108956, [3, -0.173333, 0], [3, 0.173333, 0]], [0.11049, [3, -0.173333, 0], [3, 0.173333, 0]], [0.107422, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.075208, [3, -0.0666667, 0], [3, 0.12, 0]], [0.277696, [3, -0.12, 0], [3, 0.173333, 0]], [-0.0168321, [3, -0.173333, 0], [3, 0.173333, 0]], [0.277696, [3, -0.173333, 0], [3, 0.173333, 0]], [0.07214, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.389678, [3, -0.0666667, 0], [3, 0.12, 0]], [0.392746, [3, -0.12, 0], [3, 0.173333, 0]], [0.194861, [3, -0.173333, 0], [3, 0.173333, 0]], [0.392746, [3, -0.173333, 0], [3, 0.173333, 0]], [0.389678, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[1.1796, [3, -0.0666667, 0], [3, 0.12, 0]], [1.18114, [3, -0.12, 0], [3, 0.173333, 0]], [1.16887, [3, -0.173333, 0], [3, 0.173333, 0]], [1.18114, [3, -0.173333, 0], [3, 0.173333, 0]], [1.17654, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.3068, [3, -0.0666667, 0], [3, 0.12, 0]], [0.3068, [3, -0.12, 0], [3, 0.173333, 0]], [0.684, [3, -0.173333, 0], [3, 0.173333, 0]], [0.3068, [3, -0.173333, 0], [3, 0.173333, 0]], [0.3068, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.130348, [3, -0.0666667, 0], [3, 0.12, 0]], [0.131882, [3, -0.12, 0], [3, 0.173333, 0]], [-0.073674, [3, -0.173333, 0], [3, 0.173333, 0]], [0.131882, [3, -0.173333, 0], [3, 0.173333, 0]], [0.131882, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.06592, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.292952, [3, -0.12, 0], [3, 0.173333, 0]], [0.00771189, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.292952, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.06592, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.1733, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.371186, [3, -0.12, 0.0497853], [3, 0.173333, -0.0719121]], [-0.538392, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.371186, [3, -0.173333, -0.0611044], [3, 0.173333, 0.0611044]], [-0.171766, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.0923279, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.0923279, [3, -0.12, 0], [3, 0.173333, 0]], [0.196393, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.0923279, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.091998, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[1.52637, [3, -0.0666667, 0], [3, 0.12, 0]], [1.51563, [3, -0.12, 0.00460218], [3, 0.173333, -0.00664759]], [1.49262, [3, -0.173333, 0], [3, 0.173333, 0]], [1.51563, [3, -0.173333, 0], [3, 0.173333, 0]], [1.49569, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[-0.10282, [3, -0.0666667, 0], [3, 0.12, 0]], [-0.10282, [3, -0.12, 0], [3, 0.173333, 0]], [-0.158044, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.10282, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.104354, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.2, 0.56, 1.08, 1.6, 2.12])
    keys.append([[0.059784, [3, -0.0666667, 0], [3, 0.12, 0]], [0.06592, [3, -0.12, 0], [3, 0.173333, 0]], [-0.530805, [3, -0.173333, 0], [3, 0.173333, 0]], [0.06592, [3, -0.173333, -0.00613605], [3, 0.173333, 0.00613605]], [0.0720561, [3, -0.173333, 0], [3, 0, 0]]])

    mul = unit_time/2.18
    times_unit = [list(np.array(t, dtype=float)*mul) for t in times]

    try:
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times_unit, keys)
    except BaseException, err:
        print err

if __name__ == "__main__":
    robotIP = "127.0.0.1" #"192.168.1.11"
    port = 9559 # Insert NAO port

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    unit_time = float(sys.argv[3])

    main(robotIP, port, unit_time)

end = time.time()
print(end-start)
