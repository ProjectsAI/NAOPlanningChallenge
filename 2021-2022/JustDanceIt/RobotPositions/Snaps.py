import sys
import time
import numpy as np
from naoqi import ALProxy

start = time.time()

def main(robotIP, port, unit_time):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.52, 1, 1.52, 2, 2.44, 3.08, 3.52, 3.92])
    keys.append([[0.108872, [3, -0.173333, 0], [3, 0.16, 0]], [0.0981341, [3, -0.16, 0], [3, 0.173333, 0]], [0.4034, [3, -0.173333, -0.0752477], [3, 0.16, 0.0694594]], [0.532256, [3, -0.16, 0], [3, 0.146667, 0]], [-0.182588, [3, -0.146667, 0], [3, 0.213333, 0]], [0.085862, [3, -0.213333, -0.115751], [3, 0.146667, 0.0795785]], [0.4034, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.144238, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.52, 1, 1.52, 2, 2.44, 3.08, 3.52, 3.92])
    keys.append([[-0.015382, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0184499, [3, -0.16, 0.00306792], [3, 0.173333, -0.00332358]], [-0.426494, [3, -0.173333, 0], [3, 0.16, 0]], [-0.20944, [3, -0.16, -0.052823], [3, 0.146667, 0.048421]], [-0.122762, [3, -0.146667, 0], [3, 0.213333, 0]], [-0.128898, [3, -0.213333, 0.00613606], [3, 0.146667, -0.00421854]], [-0.426494, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.032256, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[-0.292008, [3, -0.2, 0], [3, 0.493333, 0]], [-0.0112903, [3, -0.493333, 0], [3, 0.36, 0]], [-0.121738, [3, -0.36, 0], [3, 0.253333, 0]], [0.093532, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[0.0227781, [3, -0.2, 0], [3, 0.493333, 0]], [-0.193732, [3, -0.493333, 0], [3, 0.36, 0]], [0.0483652, [3, -0.36, 0], [3, 0.253333, 0]], [-0.116542, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[-0.472429, [3, -0.186667, 0], [3, 0.16, 0]], [-0.624296, [3, -0.16, 0], [3, 0.173333, 0]], [-0.424876, [3, -0.173333, 0], [3, 0.16, 0]], [-0.61049, [3, -0.16, 0], [3, 0.146667, 0]], [-0.429478, [3, -0.146667, 0], [3, 0.213333, 0]], [-0.605888, [3, -0.213333, 0], [3, 0.146667, 0]], [-0.424876, [3, -0.146667, 0], [3, 0.12, 0]], [-0.427944, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[-2.00037, [3, -0.186667, 0], [3, 0.16, 0]], [-1.51563, [3, -0.16, 0], [3, 0.173333, 0]], [-1.68591, [3, -0.173333, 0], [3, 0.16, 0]], [-1.5233, [3, -0.16, 0], [3, 0.146667, 0]], [-1.6767, [3, -0.146667, 0], [3, 0.213333, 0]], [-1.51717, [3, -0.213333, 0], [3, 0.146667, 0]], [-1.68591, [3, -0.146667, 0], [3, 0.12, 0]], [-1.17509, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.48, 1.48, 3.48, 3.92])
    keys.append([[0.295298, [3, -0.16, 0], [3, 0.333333, 0]], [0.237117, [3, -0.333333, 0], [3, 0.666667, 0]], [0.237117, [3, -0.666667, 0], [3, 0.146667, 0]], [0.3048, [3, -0.146667, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[0.26973, [3, -0.2, 0], [3, 0.493333, 0]], [0.33444, [3, -0.493333, -0.0248861], [3, 0.36, 0.0181601]], [0.398869, [3, -0.36, 0], [3, 0.253333, 0]], [0.138102, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[0.0853684, [3, -0.2, 0], [3, 0.493333, 0]], [0.295708, [3, -0.493333, 0], [3, 0.36, 0]], [0.014986, [3, -0.36, 0], [3, 0.253333, 0]], [0.11816, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[-0.384992, [3, -0.2, 0], [3, 0.493333, 0]], [-0.401866, [3, -0.493333, 0], [3, 0.36, 0]], [-0.384992, [3, -0.36, -0.0168739], [3, 0.253333, 0.0118742]], [-0.171766, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[0.388217, [3, -0.2, 0], [3, 0.493333, 0]], [0.0300457, [3, -0.493333, 0], [3, 0.36, 0]], [0.109814, [3, -0.36, 0], [3, 0.253333, 0]], [-0.090548, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[1.59072, [3, -0.186667, 0], [3, 0.16, 0]], [1.57998, [3, -0.16, 0], [3, 0.173333, 0]], [1.61066, [3, -0.173333, 0], [3, 0.16, 0]], [1.60299, [3, -0.16, 0], [3, 0.146667, 0]], [1.60452, [3, -0.146667, -0.000416456], [3, 0.213333, 0.000605754]], [1.60606, [3, -0.213333, -0.00121217], [3, 0.146667, 0.000833364]], [1.61066, [3, -0.146667, 0], [3, 0.12, 0]], [1.48027, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[0.0643861, [3, -0.186667, 0], [3, 0.16, 0]], [0.102736, [3, -0.16, 0], [3, 0.173333, 0]], [0.0904641, [3, -0.173333, 0], [3, 0.16, 0]], [0.0904641, [3, -0.16, 0], [3, 0.146667, 0]], [0.0904641, [3, -0.146667, 0], [3, 0.213333, 0]], [0.093532, [3, -0.213333, 0], [3, 0.146667, 0]], [0.0904641, [3, -0.146667, 0.00112491], [3, 0.12, -0.000920382]], [0.0873961, [3, -0.12, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.48, 1.48, 3.48, 3.92])
    keys.append([[0.136484, [3, -0.16, 0], [3, 0.333333, 0]], [0.567537, [3, -0.333333, 0], [3, 0.666667, 0]], [0.567537, [3, -0.666667, 0], [3, 0.146667, 0]], [0.145688, [3, -0.146667, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[-0.298148, [3, -0.2, 0], [3, 0.493333, 0]], [-0.0358286, [3, -0.493333, -0.00840843], [3, 0.36, 0.00613588]], [-0.0296928, [3, -0.36, -0.00613588], [3, 0.253333, 0.00431784]], [0.107422, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[-0.0192192, [3, -0.2, 0], [3, 0.493333, 0]], [-0.0780021, [3, -0.493333, 0], [3, 0.36, 0]], [0.0355138, [3, -0.36, -0.0293756], [3, 0.253333, 0.0206717]], [0.07214, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[1.52944, [3, -0.186667, 0], [3, 0.16, 0]], [0.89283, [3, -0.16, 0], [3, 0.173333, 0]], [1.48649, [3, -0.173333, 0], [3, 0.16, 0]], [0.994073, [3, -0.16, 0], [3, 0.146667, 0]], [1.46961, [3, -0.146667, 0], [3, 0.213333, 0]], [0.966462, [3, -0.213333, 0], [3, 0.146667, 0]], [1.48649, [3, -0.146667, 0], [3, 0.12, 0]], [0.389678, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[0.944902, [3, -0.186667, 0], [3, 0.16, 0]], [2.0816, [3, -0.16, 0], [3, 0.173333, 0]], [0.757754, [3, -0.173333, 0], [3, 0.16, 0]], [2.0944, [3, -0.16, 0], [3, 0.146667, 0]], [0.74088, [3, -0.146667, 0], [3, 0.213333, 0]], [2.07699, [3, -0.213333, 0], [3, 0.146667, 0]], [0.757754, [3, -0.146667, 0], [3, 0.12, 0]], [1.17654, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.48, 1.48, 2, 2.8, 3.48, 3.92])
    keys.append([[0.340389, [3, -0.16, 0], [3, 0.333333, 0]], [0.247273, [3, -0.333333, 0], [3, 0.173333, 0]], [0.630909, [3, -0.173333, -0.0658953], [3, 0.266667, 0.101377]], [0.749091, [3, -0.266667, 0], [3, 0.226667, 0]], [0.247273, [3, -0.226667, 0], [3, 0.146667, 0]], [0.3068, [3, -0.146667, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[0.25774, [3, -0.2, 0], [3, 0.493333, 0]], [0.397054, [3, -0.493333, -0.0168164], [3, 0.36, 0.0122714]], [0.409325, [3, -0.36, 0], [3, 0.253333, 0]], [0.131882, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[-0.0671419, [3, -0.2, 0], [3, 0.493333, 0]], [0.0511575, [3, -0.493333, 0], [3, 0.36, 0]], [-0.148262, [3, -0.36, 0], [3, 0.253333, 0]], [-0.06592, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([3.92])
    keys.append([[-0.171766, [3, -1.30667, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.6, 2.08, 3.16, 3.92])
    keys.append([[0.405876, [3, -0.2, 0], [3, 0.493333, 0]], [0.0307944, [3, -0.493333, 0.00210211], [3, 0.36, -0.00153397]], [0.0292604, [3, -0.36, 0.00153397], [3, 0.253333, -0.00107946]], [-0.091998, [3, -0.253333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[1.34536, [3, -0.186667, 0], [3, 0.16, 0]], [1.88839, [3, -0.16, 0], [3, 0.173333, 0]], [1.3561, [3, -0.173333, 0], [3, 0.16, 0]], [1.45427, [3, -0.16, 0], [3, 0.146667, 0]], [1.41899, [3, -0.146667, 0], [3, 0.213333, 0]], [1.46961, [3, -0.213333, 0], [3, 0.146667, 0]], [1.3561, [3, -0.146667, 0], [3, 0.12, 0]], [1.49569, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.48, 3.12, 3.56, 3.92])
    keys.append([[-0.112024, [3, -0.186667, 0], [3, 0.16, 0]], [-0.104354, [3, -0.16, 0], [3, 0.173333, 0]], [-0.570689, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0706059, [3, -0.16, 0], [3, 0.146667, 0]], [-0.526205, [3, -0.146667, 0], [3, 0.213333, 0]], [-0.067538, [3, -0.213333, 0], [3, 0.146667, 0]], [-0.570689, [3, -0.146667, 0], [3, 0.12, 0]], [-0.104354, [3, -0.12, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.48, 1.48, 3.48, 3.92])
    keys.append([[-0.366667, [3, -0.16, 0], [3, 0.333333, 0]], [1.04921, [3, -0.333333, 0], [3, 0.666667, 0]], [1.04921, [3, -0.666667, 0], [3, 0.146667, 0]], [0.0720561, [3, -0.146667, 0], [3, 0, 0]]])

    mul = unit_time/4.1
    times_unit = [list(np.array(t, dtype=float)*mul) for t in times]

    try:
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times_unit, keys)
    except BaseException, err:
        print err

if __name__ == "__main__":
    robotIP = "127.0.0.1" #"192.168.1.11"
    port = 9559 # Insert NAO port

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    unit_time = float(sys.argv[3])

    main(robotIP, port, unit_time)

end = time.time()
print(end-start)