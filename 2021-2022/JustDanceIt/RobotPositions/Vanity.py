import sys
import time
import numpy as np
from naoqi import ALProxy

start = time.time()

def main(robotIP, port, unit_time):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.96, 1.48, 1.96, 2.48, 2.96, 3.92])
    keys.append([[0.343573, [3, -0.32, 0], [3, 0.173333, 0]], [0.361981, [3, -0.173333, 0], [3, 0.16, 0]], [-0.04913, [3, -0.16, 0.118793], [3, 0.173333, -0.128692]], [-0.380475, [3, -0.173333, 0], [3, 0.16, 0]], [0.240796, [3, -0.16, 0], [3, 0.32, 0]], [-0.144238, [3, -0.32, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.96, 1.48, 1.96, 2.48, 2.96, 3.92])
    keys.append([[0.5568, [3, -0.32, 0], [3, 0.173333, 0]], [-0.411154, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0537319, [3, -0.16, -0.0773136], [3, 0.173333, 0.0837565]], [0.0720561, [3, -0.173333, -0.0949238], [3, 0.16, 0.087622]], [0.493905, [3, -0.16, 0], [3, 0.32, 0]], [-0.032256, [3, -0.32, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[-0.682424, [3, -0.186667, 0], [3, 0.16, 0]], [-0.781907, [3, -0.16, 0], [3, 0.173333, 0]], [-0.357974, [3, -0.173333, 0], [3, 0.16, 0]], [-0.425471, [3, -0.16, 0], [3, 0.173333, 0]], [-0.256563, [3, -0.173333, 0], [3, 0.16, 0]], [-0.280998, [3, -0.16, 0.0244346], [3, 0.133333, -0.0203622]], [-0.518363, [3, -0.133333, 0], [3, 0.16, 0]], [0.093532, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[-0.137881, [3, -0.186667, 0], [3, 0.16, 0]], [-0.0558505, [3, -0.16, 0], [3, 0.173333, 0]], [-0.165806, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0268008, [3, -0.16, -0.030997], [3, 0.173333, 0.0335801]], [0.0279253, [3, -0.173333, -0.0143262], [3, 0.16, 0.0132242]], [0.0558505, [3, -0.16, -0.0276079], [3, 0.133333, 0.0230066]], [0.179769, [3, -0.133333, 0], [3, 0.16, 0]], [-0.116542, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[-1.06149, [3, -0.173333, 0], [3, 0.16, 0]], [-0.455555, [3, -0.16, 0], [3, 0.173333, 0]], [-0.952573, [3, -0.173333, 0], [3, 0.16, 0]], [-0.492371, [3, -0.16, 0], [3, 0.173333, 0]], [-1.06149, [3, -0.173333, 0], [3, 0.16, 0]], [-0.83147, [3, -0.16, 0], [3, 0.133333, 0]], [-1.36837, [3, -0.133333, 0], [3, 0.173333, 0]], [-0.427944, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[-1.6629, [3, -0.173333, 0], [3, 0.16, 0]], [-0.918907, [3, -0.16, -0.278083], [3, 0.173333, 0.301257]], [0.075124, [3, -0.173333, 0], [3, 0.16, 0]], [-0.553816, [3, -0.16, 0.278083], [3, 0.173333, -0.301257]], [-1.6629, [3, -0.173333, 0], [3, 0.16, 0]], [-0.941834, [3, -0.16, -0.207245], [3, 0.133333, 0.172704]], [-0.523053, [3, -0.133333, 0], [3, 0.173333, 0]], [-1.17509, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.44, 1.44, 2.92, 3.92])
    keys.append([[0.295298, [3, -0.146667, 0], [3, 0.333333, 0]], [0.295298, [3, -0.333333, 0], [3, 0.493333, 0]], [0.296389, [3, -0.493333, -0.001091], [3, 0.333333, 0.000737164]], [0.3048, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[-0.168712, [3, -0.186667, 0], [3, 0.16, 0]], [-0.329782, [3, -0.16, 0], [3, 0.173333, 0]], [0.0567862, [3, -0.173333, -0.102635], [3, 0.16, 0.0947398]], [0.262342, [3, -0.16, 0], [3, 0.173333, 0]], [-0.185867, [3, -0.173333, 0], [3, 0.16, 0]], [0.107127, [3, -0.16, 0], [3, 0.133333, 0]], [-0.139847, [3, -0.133333, 0], [3, 0.16, 0]], [0.138102, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[0.39235, [3, -0.186667, 0], [3, 0.16, 0]], [0.226678, [3, -0.16, 0.036816], [3, 0.173333, -0.039884]], [0.16225, [3, -0.173333, 0.0241963], [3, 0.16, -0.0223351]], [0.0870839, [3, -0.16, 0.0338998], [3, 0.173333, -0.0367247]], [-0.0496235, [3, -0.173333, 0.0877762], [3, 0.16, -0.0810242]], [-0.419317, [3, -0.16, 0], [3, 0.133333, 0]], [-0.345685, [3, -0.133333, -0.073632], [3, 0.16, 0.0883584]], [0.11816, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[-0.391128, [3, -0.186667, 0], [3, 0.16, 0]], [-0.340507, [3, -0.16, -0.01399], [3, 0.173333, 0.0151558]], [-0.303691, [3, -0.173333, 0], [3, 0.16, 0]], [-0.354312, [3, -0.16, 0.0287164], [3, 0.173333, -0.0311094]], [-0.483168, [3, -0.173333, 0], [3, 0.16, 0]], [-0.391128, [3, -0.16, -0.0259384], [3, 0.133333, 0.0216154]], [-0.340507, [3, -0.133333, -0.0332367], [3, 0.16, 0.039884]], [-0.171766, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[1.14373, [3, -0.186667, 0], [3, 0.16, 0]], [1.33343, [3, -0.16, 0], [3, 0.173333, 0]], [0.497419, [3, -0.173333, 0.00278512], [3, 0.16, -0.00257088]], [0.494848, [3, -0.16, 0], [3, 0.173333, 0]], [0.699619, [3, -0.173333, 0], [3, 0.16, 0]], [0.540082, [3, -0.16, 0], [3, 0.133333, 0]], [1.00949, [3, -0.133333, 0], [3, 0.16, 0]], [-0.090548, [3, -0.16, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[1.3913, [3, -0.173333, 0], [3, 0.16, 0]], [2.05704, [3, -0.16, -0.034477], [3, 0.173333, 0.03735]], [2.0944, [3, -0.173333, 0], [3, 0.16, 0]], [1.73491, [3, -0.16, 0.112496], [3, 0.173333, -0.12187]], [1.3913, [3, -0.173333, 0], [3, 0.16, 0]], [1.40058, [3, -0.16, 0], [3, 0.133333, 0]], [0.704148, [3, -0.133333, 0], [3, 0.173333, 0]], [1.48027, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[0.481634, [3, -0.173333, 0], [3, 0.16, 0]], [0.51845, [3, -0.16, 0], [3, 0.173333, 0]], [0.461692, [3, -0.173333, 0], [3, 0.16, 0]], [0.719404, [3, -0.16, 0], [3, 0.173333, 0]], [0.481634, [3, -0.173333, 0.122828], [3, 0.16, -0.11338]], [0.01078, [3, -0.16, 0], [3, 0.133333, 0]], [0.016916, [3, -0.133333, -0.006136], [3, 0.173333, 0.0079768]], [0.0873961, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.44, 1.44, 2.92, 3.92])
    keys.append([[0.676451, [3, -0.146667, 0], [3, 0.333333, 0]], [0.839057, [3, -0.333333, 0], [3, 0.493333, 0]], [0.118076, [3, -0.493333, 0], [3, 0.333333, 0]], [0.145688, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[-0.293215, [3, -0.186667, 0], [3, 0.16, 0]], [-0.518363, [3, -0.16, 0], [3, 0.173333, 0]], [-0.207637, [3, -0.173333, 0], [3, 0.16, 0]], [-0.456145, [3, -0.16, 0], [3, 0.173333, 0]], [-0.293215, [3, -0.173333, 0], [3, 0.16, 0]], [-0.670206, [3, -0.16, 0.0137308], [3, 0.133333, -0.0114423]], [-0.681649, [3, -0.133333, 0], [3, 0.16, 0]], [0.107422, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[-0.0558505, [3, -0.186667, 0], [3, 0.16, 0]], [-0.137881, [3, -0.16, 0.0128886], [3, 0.173333, -0.0139626]], [-0.151844, [3, -0.173333, 0], [3, 0.16, 0]], [0.0278439, [3, -0.16, 0], [3, 0.173333, 0]], [0.0139626, [3, -0.173333, 0], [3, 0.16, 0]], [0.137881, [3, -0.16, 0], [3, 0.133333, 0]], [0.109637, [3, -0.133333, 0.00996075], [3, 0.16, -0.0119529]], [0.07214, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[0.980268, [3, -0.173333, 0], [3, 0.16, 0]], [0.83147, [3, -0.16, 0], [3, 0.173333, 0]], [1.36837, [3, -0.173333, 0], [3, 0.16, 0]], [1.14594, [3, -0.16, 0.0620963], [3, 0.173333, -0.067271]], [0.980268, [3, -0.173333, 0.119667], [3, 0.16, -0.110461]], [0.455555, [3, -0.16, 0], [3, 0.133333, 0]], [0.952573, [3, -0.133333, 0], [3, 0.173333, 0]], [0.389678, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[2.08007, [3, -0.173333, 0], [3, 0.16, 0]], [0.941834, [3, -0.16, 0.249122], [3, 0.173333, -0.269882]], [0.523053, [3, -0.173333, 0], [3, 0.16, 0]], [2.08007, [3, -0.16, 0], [3, 0.173333, 0]], [2.08007, [3, -0.173333, 0], [3, 0.16, 0]], [0.918907, [3, -0.16, 0.391853], [3, 0.133333, -0.326544]], [-0.075124, [3, -0.133333, 0], [3, 0.173333, 0]], [1.17654, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.44, 1.44, 2.92, 3.92])
    keys.append([[0.340389, [3, -0.146667, 0], [3, 0.333333, 0]], [0.340389, [3, -0.333333, 0], [3, 0.493333, 0]], [0.340753, [3, -0.493333, 0], [3, 0.333333, 0]], [0.3068, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[0.107127, [3, -0.186667, 0], [3, 0.16, 0]], [-0.139847, [3, -0.16, 0], [3, 0.173333, 0]], [0.186895, [3, -0.173333, -0.02659], [3, 0.16, 0.0245446]], [0.21144, [3, -0.16, 0], [3, 0.173333, 0]], [-0.13343, [3, -0.173333, 0.0382222], [3, 0.16, -0.035282]], [-0.168712, [3, -0.16, 0.035282], [3, 0.133333, -0.0294017]], [-0.329782, [3, -0.133333, 0], [3, 0.16, 0]], [0.131882, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[0.419317, [3, -0.186667, 0], [3, 0.16, 0]], [0.345685, [3, -0.16, 0.026262], [3, 0.173333, -0.0284505]], [0.255179, [3, -0.173333, 0.0826928], [3, 0.16, -0.0763318]], [-0.131389, [3, -0.16, 0], [3, 0.173333, 0]], [0.0555781, [3, -0.173333, 0], [3, 0.16, 0]], [-0.39235, [3, -0.16, 0], [3, 0.133333, 0]], [-0.226678, [3, -0.133333, -0.0494591], [3, 0.16, 0.0593509]], [-0.06592, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([3.92])
    keys.append([[-0.171766, [3, -1.30667, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.56, 1.04, 1.56, 2.04, 2.56, 3.04, 3.44, 3.92])
    keys.append([[0.540082, [3, -0.186667, 0], [3, 0.16, 0]], [1.00949, [3, -0.16, 0], [3, 0.173333, 0]], [0.268564, [3, -0.173333, 0], [3, 0.16, 0]], [0.561558, [3, -0.16, -0.0644309], [3, 0.173333, 0.0698001]], [0.671257, [3, -0.173333, -0.10091], [3, 0.16, 0.0931475]], [1.14373, [3, -0.16, -0.120395], [3, 0.133333, 0.100329]], [1.33343, [3, -0.133333, 0], [3, 0.16, 0]], [-0.091998, [3, -0.16, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[1.40979, [3, -0.173333, 0], [3, 0.16, 0]], [1.40058, [3, -0.16, 0.00920322], [3, 0.173333, -0.00997015]], [0.704148, [3, -0.173333, 0], [3, 0.16, 0]], [0.808459, [3, -0.16, -0.104311], [3, 0.173333, 0.113004]], [1.40979, [3, -0.173333, -0.216422], [3, 0.16, 0.199774]], [2.05704, [3, -0.16, -0.04482], [3, 0.133333, 0.03735]], [2.0944, [3, -0.133333, 0], [3, 0.173333, 0]], [1.49569, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.52, 1, 1.52, 2, 2.52, 3, 3.4, 3.92])
    keys.append([[-0.401949, [3, -0.173333, 0], [3, 0.16, 0]], [-0.01078, [3, -0.16, 0], [3, 0.173333, 0]], [-0.016916, [3, -0.173333, 0], [3, 0.16, 0]], [-0.00771196, [3, -0.16, 0], [3, 0.173333, 0]], [-0.401949, [3, -0.173333, 0.0885279], [3, 0.16, -0.0817181]], [-0.51845, [3, -0.16, 0], [3, 0.133333, 0]], [-0.461692, [3, -0.133333, -0.0567581], [3, 0.173333, 0.0737856]], [-0.104354, [3, -0.173333, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.44, 1.44, 2.92, 3.92])
    keys.append([[-0.421891, [3, -0.146667, 0], [3, 0.333333, 0]], [0.604353, [3, -0.333333, 0], [3, 0.493333, 0]], [-0.366667, [3, -0.493333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0, 0]]])
   
    mul = unit_time/4.05
    times_unit = [list(np.array(t, dtype=float)*mul) for t in times]

    try:
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times_unit, keys)
    except BaseException, err:
        print err

if __name__ == "__main__":
    robotIP = "127.0.0.1" #"192.168.1.11"
    port = 9559 # Insert NAO port

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    unit_time = float(sys.argv[3])

    main(robotIP, port, unit_time)

end = time.time()
print(end-start)