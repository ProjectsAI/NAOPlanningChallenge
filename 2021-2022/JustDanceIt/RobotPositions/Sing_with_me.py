import sys
import time
import numpy as np
from naoqi import ALProxy

start = time.time()

def main(robotIP, port, unit_time):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([1.26667, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2])
    keys.append([[0.0797261, [3, -0.422222, 0], [3, 0.511111, 0]], [-0.055266, [3, -0.511111, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.055266, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.191709, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.055266, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.055266, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.222222, 0]], [-0.055266, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0444444, 0]], [0.191709, [3, -0.0444444, 0], [3, 0.2, 0]], [-0.22554, [3, -0.2, 0], [3, 0.0666667, 0]], [0.0812601, [3, -0.0666667, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([1.26667, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2])
    keys.append([[-0.108956, [3, -0.422222, 0], [3, 0.511111, 0]], [-0.20253, [3, -0.511111, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.20253, [3, -0.177778, 0], [3, 0.0888889, 0]], [-0.176453, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.20253, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.20253, [3, -0.177778, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.222222, 0]], [-0.20253, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0444444, 0]], [-0.176453, [3, -0.0444444, 0], [3, 0.2, 0]], [-0.428028, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.108956, [3, -0.0666667, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([1.26667, 1.66667])
    keys.append([[-0.374338, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.374338, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([1.26667, 1.66667])
    keys.append([[0.016916, [3, -0.422222, 0], [3, 0.133333, 0]], [0.016916, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[-1.03541, [3, -0.422222, 0], [3, 0.222222, 0]], [-1.05688, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.05688, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.155556, 0]], [-1.05688, [3, -0.155556, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.05688, [3, -0.177778, 0], [3, 0.0888889, 0]], [-1.04461, [3, -0.0888889, 0], [3, 0.222222, 0]], [-1.05688, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.05688, [3, -0.177778, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.222222, 0]], [-1.05688, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0444444, 0]], [-1.04461, [3, -0.0444444, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.04461, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[-1.76261, [3, -0.422222, 0], [3, 0.222222, 0]], [-1.75341, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.75495, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.155556, 0]], [-1.75495, [3, -0.155556, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.75495, [3, -0.177778, 0], [3, 0.0888889, 0]], [-1.75034, [3, -0.0888889, 0], [3, 0.222222, 0]], [-1.75495, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.75495, [3, -0.177778, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.222222, 0]], [-1.75495, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0444444, 0]], [-1.75034, [3, -0.0444444, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.75034, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([1.26667])
    keys.append([[0.920024, [3, -0.422222, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([1.26667, 1.66667])
    keys.append([[-0.162562, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.162562, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([1.26667, 1.66667])
    keys.append([[0.101286, [3, -0.422222, 0], [3, 0.133333, 0]], [0.101286, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([1.26667, 1.66667])
    keys.append([[-0.395731, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.395731, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([1.26667, 1.66667])
    keys.append([[0.789967, [3, -0.422222, 0], [3, 0.133333, 0]], [0.789967, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[0.745483, [3, -0.422222, 0], [3, 0.222222, 0]], [0.733209, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.743948, [3, -0.0666667, -0.00460214], [3, 0.0666667, 0.00460214]], [0.760822, [3, -0.0666667, 0], [3, 0.155556, 0]], [0.743948, [3, -0.155556, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.743948, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.760822, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.743948, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.743948, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.222222, 0]], [0.743948, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0444444, 0]], [0.760822, [3, -0.0444444, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.760822, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([1.26667, 1.93333, 2.33333, 3, 3.8, 4.66667, 5.46667, 6.26667, 7.06667, 7.8, 8.6, 9.4, 10.2, 11, 11.8667, 12.6667, 13.4, 14.2, 14.6])
    keys.append([[0.515382, [3, -0.422222, 0], [3, 0.222222, 0]], [0.516916, [3, -0.222222, 0], [3, 0.133333, 0]], [0.501576, [3, -0.133333, 0], [3, 0.222222, 0]], [0.501576, [3, -0.222222, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.288889, 0]], [0.501576, [3, -0.288889, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.244444, 0]], [0.501576, [3, -0.244444, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.288889, 0]], [0.501576, [3, -0.288889, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.244444, 0]], [0.501576, [3, -0.244444, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.133333, 0]], [0.50311, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([1.26667])
    keys.append([[-1.01862, [3, -0.422222, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([1.26667, 1.66667])
    keys.append([[-0.207048, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.207048, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([1.26667, 1.66667])
    keys.append([[0.032256, [3, -0.422222, 0], [3, 0.133333, 0]], [0.032256, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[1.03242, [3, -0.422222, 0], [3, 0.222222, 0]], [0.523136, [3, -0.222222, 0], [3, 0.0666667, 0]], [1.22264, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.155556, 0]], [1.22264, [3, -0.155556, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.177778, 0]], [1.22264, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.681137, [3, -0.0888889, 0], [3, 0.222222, 0]], [1.22264, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.177778, 0]], [1.22264, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.222222, 0]], [1.22264, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0444444, 0]], [0.681137, [3, -0.0444444, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.133333, 0]], [1.11066, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[0.265341, [3, -0.422222, 0], [3, 0.222222, 0]], [-0.029188, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.408002, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.155556, 0]], [0.408002, [3, -0.155556, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.408002, [3, -0.177778, 0], [3, 0.0888889, 0]], [-0.138102, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.408002, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.408002, [3, -0.177778, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.222222, 0]], [0.408002, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0444444, 0]], [-0.138102, [3, -0.0444444, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.391128, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([1.26667, 1.93333])
    keys.append([[0.918933, [3, -0.422222, 0], [3, 0.222222, 0]], [0.452752, [3, -0.222222, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([1.26667, 1.66667])
    keys.append([[-0.032256, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.032256, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([1.26667, 1.66667])
    keys.append([[-0.016832, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.016832, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([1.26667, 1.66667])
    keys.append([[0.55535, [3, -0.422222, 0], [3, 0.133333, 0]], [0.55535, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[0.906636, [3, -0.422222, 0], [3, 0.222222, 0]], [0.868286, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.92351, [3, -0.0666667, -0.0112495], [3, 0.0666667, 0.0112495]], [0.935783, [3, -0.0666667, 0], [3, 0.155556, 0]], [0.92351, [3, -0.155556, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.92351, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.935783, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.92351, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.92351, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.222222, 0]], [0.92351, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0444444, 0]], [0.935783, [3, -0.0444444, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.89283, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([1.26667, 1.93333, 2.13333, 2.33333, 2.8, 3, 3.53333, 3.8, 4.46667, 4.66667, 5.26667, 5.46667, 6.06667, 6.26667, 6.86667, 7.06667, 7.6, 7.8, 8.4, 8.6, 9.2, 9.4, 10, 10.2, 10.8, 11, 11.6667, 11.8667, 12.4667, 12.6667, 13.2667, 13.4, 14, 14.2, 14.6])
    keys.append([[-0.185656, [3, -0.422222, 0], [3, 0.222222, 0]], [-0.101286, [3, -0.222222, -0.0275333], [3, 0.0666667, 0.00826]], [-0.0782759, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.155556, 0]], [-0.0782759, [3, -0.155556, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.0782759, [3, -0.177778, 0], [3, 0.0888889, 0]], [-0.16418, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.0782759, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.0782759, [3, -0.177778, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.222222, 0]], [-0.0782759, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0444444, 0]], [-0.16418, [3, -0.0444444, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.075208, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([1.26667, 1.93333])
    keys.append([[0.961776, [3, -0.422222, 0], [3, 0.222222, 0]], [0.682588, [3, -0.222222, 0], [3, 0, 0]]])

    mul = unit_time/14.7
    times_unit = [list(np.array(t, dtype=float)*mul) for t in times]

    try:
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times_unit, keys)
    except BaseException, err:
        print err

if __name__ == "__main__":
    robotIP = "127.0.0.1" #"192.168.1.11"
    port = 9559 # Insert NAO port

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    unit_time = float(sys.argv[3])

    main(robotIP, port, unit_time)

end = time.time()
print(end-start)
