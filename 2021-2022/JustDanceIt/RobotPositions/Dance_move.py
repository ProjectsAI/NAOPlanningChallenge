import sys
import time
import numpy as np
from naoqi import ALProxy

start = time.time()

def main(robotIP, port, unit_time):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.00302603, [3, -0.288889, 0], [3, 0.155556, 0]], [0.00302603, [3, -0.155556, 0], [3, 0.155556, 0]], [0.340507, [3, -0.155556, 0], [3, 0.6, 0]], [-0.144238, [3, -0.6, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-1.10145, [3, -0.288889, 0], [3, 0.155556, 0]], [1.4097, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.00924597, [3, -0.155556, 0.00596555], [3, 0.6, -0.02301]], [-0.032256, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-0.359129, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.762571, [3, -0.155556, 0.0153397], [3, 0.155556, -0.0153397]], [-0.777911, [3, -0.155556, 0], [3, 0.6, 0]], [0.093532, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-0.282235, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.0598056, [3, -0.155556, -0.00460208], [3, 0.155556, 0.00460208]], [-0.0552035, [3, -0.155556, 0], [3, 0.6, 0]], [-0.116542, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[-0.748551, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.901949, [3, -0.155556, 0.123487], [3, 0.155556, -0.123487]], [-1.48947, [3, -0.155556, 0], [3, 0.155556, 0]], [-1.02314, [3, -0.155556, -0.213659], [3, 0.133333, 0.183136]], [-0.299088, [3, -0.133333, 0], [3, 0.311111, 0]], [-0.427944, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[0.89428, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.681137, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.52467, [3, -0.155556, -0.0570135], [3, 0.155556, 0.0570135]], [-0.339056, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.932714, [3, -0.133333, 0.083603], [3, 0.311111, -0.195074]], [-1.17509, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.920023, [3, -0.288889, 0], [3, 0.155556, 0]], [0.920023, [3, -0.155556, 0], [3, 0.155556, 0]], [0.921478, [3, -0.155556, 0], [3, 0.6, 0]], [0.3048, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.232947, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.224186, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.21038, [3, -0.155556, -0.0138056], [3, 0.6, 0.05325]], [0.138102, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.423192, [3, -0.288889, 0], [3, 0.155556, 0]], [0.31121, [3, -0.155556, 0.0168738], [3, 0.155556, -0.0168738]], [0.294336, [3, -0.155556, 0.0132485], [3, 0.6, -0.0511014]], [0.11816, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-0.113559, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.236279, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.230144, [3, -0.155556, -0.00442737], [3, 0.6, 0.017077]], [-0.171766, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.14541, [3, -0.288889, 0], [3, 0.155556, 0]], [1.11643, [3, -0.155556, -0.0168739], [3, 0.155556, 0.0168739]], [1.13331, [3, -0.155556, 0], [3, 0.6, 0]], [-0.090548, [3, -0.6, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[0.653443, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.934249, [3, -0.155556, 0], [3, 0.155556, 0]], [0.489305, [3, -0.155556, -0.231633], [3, 0.155556, 0.231633]], [0.720938, [3, -0.155556, 0], [3, 0.133333, 0]], [0.437147, [3, -0.133333, 0], [3, 0.311111, 0]], [1.48027, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[1.32687, [3, -0.288889, 0], [3, 0.155556, 0]], [1.39743, [3, -0.155556, 0], [3, 0.155556, 0]], [0.010696, [3, -0.155556, 0], [3, 0.155556, 0]], [0.061318, [3, -0.155556, -0.0506219], [3, 0.133333, 0.0433902]], [1.13052, [3, -0.133333, 0], [3, 0.311111, 0]], [0.0873961, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-1.02475, [3, -0.288889, 0], [3, 0.155556, 0]], [-1.02475, [3, -0.155556, 0], [3, 0.155556, 0]], [-1.02015, [3, -0.155556, -0.00460241], [3, 0.6, 0.0177521]], [0.145688, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-0.102805, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.210185, [3, -0.155556, 0.010739], [3, 0.155556, -0.010739]], [-0.220924, [3, -0.155556, 0], [3, 0.6, 0]], [0.107422, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[-0.00456227, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.105806, [3, -0.155556, 0.00153396], [3, 0.155556, -0.00153396]], [-0.10734, [3, -0.155556, 0], [3, 0.6, 0]], [0.07214, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[0.727158, [3, -0.288889, 0], [3, 0.155556, 0]], [1.10452, [3, -0.155556, 0], [3, 0.155556, 0]], [0.176453, [3, -0.155556, 0], [3, 0.155556, 0]], [0.280764, [3, -0.155556, -0.104311], [3, 0.133333, 0.0894097]], [1.34843, [3, -0.133333, 0], [3, 0.311111, 0]], [0.389678, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[0.946436, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.515466, [3, -0.155556, 0], [3, 0.155556, 0]], [0.728609, [3, -0.155556, 0], [3, 0.155556, 0]], [-1.22878, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.0537319, [3, -0.133333, -0.240531], [3, 0.311111, 0.56124]], [1.17654, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.920387, [3, -0.288889, 0], [3, 0.155556, 0]], [0.920387, [3, -0.155556, 0], [3, 0.155556, 0]], [0.922933, [3, -0.155556, 0], [3, 0.6, 0]], [0.3068, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.041361, [3, -0.288889, 0], [3, 0.155556, 0]], [-0.24243, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.237827, [3, -0.155556, -0.00460242], [3, 0.6, 0.0177522]], [0.131882, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.0153604, [3, -0.288889, 0], [3, 0.155556, 0]], [0.210178, [3, -0.155556, -0.00460242], [3, 0.155556, 0.00460242]], [0.21478, [3, -0.155556, 0], [3, 0.6, 0]], [-0.06592, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([3.6])
    keys.append([[-0.171766, [3, -1.2, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.105432, [3, -0.288889, 0], [3, 0.155556, 0]], [0.619321, [3, -0.155556, -0.0214763], [3, 0.155556, 0.0214763]], [0.640798, [3, -0.155556, 0], [3, 0.6, 0]], [-0.091998, [3, -0.6, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[-0.970981, [3, -0.288889, 0], [3, 0.155556, 0]], [0.782382, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.877407, [3, -0.155556, 0], [3, 0.155556, 0]], [-0.085862, [3, -0.155556, -0.230454], [3, 0.133333, 0.197532]], [0.406552, [3, -0.133333, -0.158155], [3, 0.311111, 0.369029]], [1.49569, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.866667, 1.33333, 1.8, 2.26667, 2.66667, 3.6])
    keys.append([[-1.40519, [3, -0.288889, 0], [3, 0.155556, 0]], [-1.30701, [3, -0.155556, -0.0672403], [3, 0.155556, 0.0672403]], [-1.00174, [3, -0.155556, 0], [3, 0.155556, 0]], [-1.25179, [3, -0.155556, 0], [3, 0.133333, 0]], [-0.00617796, [3, -0.133333, 0], [3, 0.311111, 0]], [-0.104354, [3, -0.311111, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.866667, 1.33333, 1.8, 3.6])
    keys.append([[0.977116, [3, -0.288889, 0], [3, 0.155556, 0]], [0.974047, [3, -0.155556, 0.00204523], [3, 0.155556, -0.00204523]], [0.964844, [3, -0.155556, 0.00920309], [3, 0.6, -0.0354976]], [0.0720561, [3, -0.6, 0], [3, 0, 0]]])

    mul = unit_time/3.59
    times_unit = [list(np.array(t, dtype=float)*mul) for t in times]

    try:
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times_unit, keys)
    except BaseException, err:
        print err

if __name__ == "__main__":
    robotIP = "127.0.0.1" #"192.168.1.11"
    port = 9559 # Insert NAO port

    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    unit_time = float(sys.argv[3])

    main(robotIP, port, unit_time)

end = time.time()
print(end-start)
